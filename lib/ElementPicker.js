// Generated by CoffeeScript 1.3.3
(function() {
  var ElementPicker;

  ElementPicker = (function() {

    function ElementPicker(canvas, context, elementNumber, nbBubbles) {
      if (elementNumber == null) {
        elementNumber = 2;
      }
      if (nbBubbles == null) {
        nbBubbles = 4;
      }
      this.bubbles = [];
      this.nbBubbles = nbBubbles;
      this.canvas = canvas;
      this.context = context;
      this.elementNumber = elementNumber;
      this.elementList = [];
      this.orderOfElement = [];
    }

    ElementPicker.prototype.addColorRecursively = function(callback) {
      var _this = this;
      document.getElementById("infos").innerHTML = "Pick a new color by clicking on picture";
      return this.canvas.onmousedown = function(evt) {
        var col, color, coords, el, element, i, imagedata, j, pos, sound, _i, _j, _len, _ref, _ref1, _results;
        coords = _this.canvas.relMouseCoords(evt);
        pos = (coords.x + coords.y) * 4;
        imagedata = _this.context.getImageData(evt.offsetX, evt.offsetY, 1, 1);
        color = new Color(imagedata.data[0], imagedata.data[1], imagedata.data[2], 255);
        sound = new Sound(_this.elementList.length);
        element = new Element(color, sound);
        _this.elementList.push(element);
        _this.canvas.onmousedown = void 0;
        if (_this.elementList.length >= _this.elementNumber) {
          _this.pickElement();
          document.getElementById("infos").innerHTML = "";
          _ref = _this.elementList;
          _results = [];
          for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
            el = _ref[i];
            col = el.color.getAsArray();
            for (j = _j = 0, _ref1 = col.length; 0 <= _ref1 ? _j < _ref1 : _j > _ref1; j = 0 <= _ref1 ? ++_j : --_j) {
              col[j] /= 255;
            }
            _results.push(window.g.cm.addVectorToShaders("col" + i, col));
          }
          return _results;
        } else {
          return _this.addColorRecursively(callback);
        }
      };
    };

    ElementPicker.prototype.configure = function(callback) {
      var i, _i, _ref;
      console.info("initializing Element Picker");
      this.elementList = [];
      this.bubbles.length = 0;
      for (i = _i = 1, _ref = this.nbBubbles; 1 <= _ref ? _i <= _ref : _i >= _ref; i = 1 <= _ref ? ++_i : --_i) {
        this.bubbles.push(new Bubble(i));
      }
      return this.addColorRecursively(callback);
    };

    ElementPicker.prototype.resetOrder = function() {
      return this.orderOfElement.length = 0;
    };

    ElementPicker.prototype.pickElement = function() {
      var color, elementToAdd, randBubble, randElementList, sound;
      randElementList = Math.floor(Math.random() * this.elementNumber);
      randBubble = Math.floor(Math.random() * this.nbBubbles);
      color = this.elementList[randElementList].color;
      sound = this.elementList[randElementList].sound;
      elementToAdd = new Element(color, sound, randBubble);
      return this.orderOfElement.push(elementToAdd);
    };

    ElementPicker.prototype.draw = function(context, video, indicesOfLevel) {
      var b, i, indNextPickedBubble, nextElement, yPadding, _i, _j, _k, _len, _ref, _ref1, _results;
      _ref = this.bubbles;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        b = _ref[_i];
        b.draw(context);
      }
      if (this.orderOfElement.length && this.orderOfElement[0] !== void 0) {
        nextElement = this.orderOfElement[indicesOfLevel];
        indNextPickedBubble = nextElement.bubble;
        this.bubbles[indNextPickedBubble].draw(context, nextElement.color.to_rgba());
      }
      if (this.orderOfElement.length && this.orderOfElement[0] !== void 0) {
        yPadding = 30;
        context.lineWidth = 1.7;
        context.strokeStyle = "black";
        for (i = _j = 0, _ref1 = this.orderOfElement.length; 0 <= _ref1 ? _j < _ref1 : _j > _ref1; i = 0 <= _ref1 ? ++_j : --_j) {
          context.strokeRect(10 + i * 30, context.canvas.height - yPadding, 10, 10);
        }
        _results = [];
        for (i = _k = 0; 0 <= indicesOfLevel ? _k < indicesOfLevel : _k > indicesOfLevel; i = 0 <= indicesOfLevel ? ++_k : --_k) {
          context.fillStyle = this.orderOfElement[i].color.to_rgba();
          _results.push(context.fillRect(10 + i * 30, context.canvas.height - yPadding, 10, 10));
        }
        return _results;
      }
    };

    return ElementPicker;

  })();

  window.ElementPicker = ElementPicker;

}).call(this);

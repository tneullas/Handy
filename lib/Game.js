// Generated by CoffeeScript 1.3.3
(function() {
  var Game;

  Game = (function() {

    function Game() {
      var _this = this;
      this.canvas = null;
      this.context = null;
      this.gl = null;
      this.elementNumber = 2;
      this.bubbleNumber = 4;
      this.isOnPause = false;
      this.configure();
      this.init();
      setInterval(function() {
        _this.update();
        return 40;
      });
      setInterval(function() {
        _this.draw();
        return 40;
      });
    }

    Game.prototype.configure = function() {
      this.canvas = document.getElementById("myCanvas");
      this.context = this.canvas.getContext('2d');
      this.cm = new CanvasManager("my3dCanvas");
      this.initKeyboard();
      this.webcam = new Webcam("video");
      this.background = new Background;
      this.elementPicker = new ElementPicker(this.canvas, this.context, this.elementNumber, this.bubbleNumber);
      this.elementPicker.configure();
      return this.cm.addVariableToShaders("tolBG", this.background.tolerance);
    };

    Game.prototype.init = function() {
      this.score = 0;
      this.level = 1;
      this.indicesOfLevel = 0;
      this.time = Infinity;
      return this.visualization = new Visualization;
    };

    Game.prototype.initKeyboard = function() {
      var _this = this;
      return document.onkeypress = function(evt) {
        var keyCode;
        evt = evt || window.event;
        keyCode = evt.which || evt.keyCode;
        if (keyCode === 80 || keyCode === 112) {
          return _this.pause();
        } else if (keyCode === 88 || keyCode === 120) {
          return _this.background.init(_this.context);
        } else if (keyCode === 70 || keyCode === 102) {
          return window.Helper.toggleFullScreen();
        } else if (keyCode === 114 || keyCode === 82) {
          _this.elementPicker.resetOrder();
          _this.elementPicker.configure();
          return _this.init();
        } else if (keyCode === 68 || keyCode === 100) {
          _this.colorDetect();
          return _this.elementIsDetected();
        } else if (keyCode === 116) {

        } else {
          return console.log(keyCode);
        }
      };
    };

    Game.prototype.elementIsDetected = function() {
      this.elementPicker.orderOfElement[this.indicesOfLevel].sound.play();
      this.score += 10;
      this.indicesOfLevel++;
      if (this.indicesOfLevel === this.level) {
        return this.levelUp();
      }
    };

    Game.prototype.colorDetect = function() {
      var col, d, founded, i, imagedata, limitFounded, _i, _len, _ref, _step;
      imagedata = this.context.getImageData(0, 0, this.context.canvas.width, this.context.canvas.height);
      founded = 0;
      limitFounded = 10;
      _ref = imagedata.data;
      for (i = _i = 0, _len = _ref.length, _step = 4; _i < _len; i = _i += _step) {
        d = _ref[i];
        if (this.elementPicker.orderOfElement.length && this.elementPicker.orderOfElement[this.indicesOfLevel] !== void 0) {
          col = this.elementPicker.orderOfElement[this.indicesOfLevel].color;
          if (col.equalsWithTolerance([imagedata.data[i], imagedata.data[i + 1], imagedata.data[i + 2], imagedata.data[i + 3]], 75)) {
            founded++;
            if (founded >= limitFounded) {
              this.elementIsDetected();
              return true;
            }
          }
        }
      }
      return false;
    };

    Game.prototype.update = function() {
      this.colorDetect();
      return this.updateTime();
    };

    Game.prototype.updateTime = function() {
      var currentTime;
      if (this.level > 1) {
        currentTime = (new Date()).getTime();
        this.time = (this.timeOfLevel - (currentTime - this.startingTime) / 1000).toFixed(1);
      }
      if (this.level > 1 && this.time <= 0) {
        this.time = 0;
        return this.loose();
      }
    };

    Game.prototype.draw = function() {
      if (this.webcam.video != null) {
        this.cm.drawScene(this.webcam.video);
      }
      this.clearCanvas();
      this.context.drawImage(this.webcam.video, 0, 0, this.context.canvas.width, this.context.canvas.height);
      this.drawTime();
      this.drawLevel();
      this.drawScore();
      this.visualization.draw(this.context);
      return this.elementPicker.draw(this.context, this.webcam.video, this.indicesOfLevel);
    };

    Game.prototype.clearCanvas = function() {
      return this.context.clearRect(0, 0, this.context.canvas.width, this.context.canvas.height);
    };

    Game.prototype.drawTime = function() {
      this.context.fillStyle = '#F0F';
      this.context.font = this.context.canvas.width / 40 + "pt sans-serif";
      this.context.textAlign = "right";
      this.context.textBaseline = "top";
      if (this.time === Infinity) {
        return this.context.fillText("Time : " + this.time, this.context.canvas.width - 10, 10);
      } else {
        return this.context.fillText("Time : " + this.time + " s", this.context.canvas.width - 10, 10);
      }
    };

    Game.prototype.drawLevel = function() {
      this.context.fillStyle = '#F0F';
      this.context.textAlign = "left";
      this.context.textBaseline = "top";
      return this.context.fillText("Level " + this.level, 10, 10);
    };

    Game.prototype.drawScore = function() {
      this.context.fillStyle = '#F0F';
      this.context.textAlign = "left";
      this.context.textBaseline = "top";
      return this.context.fillText("Score " + this.score, 10, 20 + Math.round(this.context.canvas.width / 30));
    };

    Game.prototype.levelUp = function() {
      console.info("Level up !");
      if (this.level > 1) {
        this.score += this.time * 10;
      }
      this.level++;
      this.startingTime = (new Date()).getTime();
      this.timeOfLevel = 4 * Math.log(this.level) + 5;
      this.time = this.timeOfLevel;
      this.indicesOfLevel = 0;
      return this.elementPicker.pickElement();
    };

    Game.prototype.loose = function() {
      console.info("You Loose :(");
      console.log("Let's try again");
      this.elementPicker.resetOrder();
      this.elementPicker.pickElement();
      return this.init();
    };

    Game.prototype.pause = function() {
      if (this.isOnPause) {
        console.log('unpause');
        return this.isOnPause = false;
      } else {
        console.log('pause');
        return this.isOnPause = true;
      }
    };

    return Game;

  })();

  window.Game = Game;

}).call(this);

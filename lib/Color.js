// Generated by CoffeeScript 1.3.3
(function() {
  var Color;

  Color = (function() {

    function Color(r, g, b, a) {
      if (r == null) {
        r = 0;
      }
      if (g == null) {
        g = 0;
      }
      if (b == null) {
        b = 0;
      }
      if (a == null) {
        a = 255;
      }
      this.r = r;
      this.g = g;
      this.b = b;
      this.a = a;
    }

    Color.prototype.to_hex = function() {
      return "#" + Color._ts(this.r) + Color._ts(this.g) + Color._ts(this.b);
    };

    Color.prototype.to_rgba = function() {
      return "rgba(" + this.r + ", " + this.g + ", " + this.b + ", " + this.a + ")";
    };

    Color.prototype.to_hsv = function() {
      return Color.rgb_to_hsv(this.r, this.g, this.b);
    };

    Color.prototype.get = function() {
      return this;
    };

    Color.prototype.getAsArray = function() {
      return [this.r, this.g, this.b, this.a];
    };

    Color.prototype.equalsWithTolerance = function(colorAsArray, tolerance) {
      if ((this.r - tolerance) <= colorAsArray[0] && (this.r + tolerance) >= colorAsArray[0] && (this.g - tolerance) <= colorAsArray[1] && (this.g + tolerance) >= colorAsArray[1] && (this.b - tolerance) <= colorAsArray[2] && (this.b + tolerance) >= colorAsArray[2] && (this.a - tolerance) <= colorAsArray[3] && (this.a + tolerance) >= colorAsArray[3]) {
        return true;
      } else {
        return false;
      }
    };

    Color.prototype.set = function(val) {
      if (val instanceof Color) {
        this.r = val.r;
        this.g = val.g;
        this.b = val.b;
        return this.a = val.a;
      } else if (typeof val === 'string' && val[0] === "#") {
        if (val.length === 4) {
          this.r = "0x" + val.slice(1, 2) + val.slice(1, 2);
          this.g = "0x" + val.slice(2, 3) + val.slice(2, 3);
          this.b = "0x" + val.slice(3, 4) + val.slice(3, 4);
          return this.a = 255;
        } else if (val.length === 7) {
          this.r = "0x" + val.slice(1, 3);
          this.g = "0x" + val.slice(3, 5);
          this.b = "0x" + val.slice(5, 7);
          return this.a = 255;
        } else {
          return console.error("get color " + val);
        }
      } else {
        return console.error("get color " + val);
      }
    };

    Color.prototype.rgb_to_hsv = function(r, g, b) {
      var del, h, max, min, s;
      r /= 255.0;
      g /= 255.0;
      b /= 255.0;
      min = Math.min(r, g, b);
      max = Math.max(r, g, b);
      del = max - min;
      if (max) {
        s = del / max;
      } else {
        return [0, 0, 0];
      }
      del += !del;
      if (r === max) {
        h = (g - b) / del;
      } else if (g === max) {
        h = 2 + (b - r) / del;
      } else {
        h = 4 + (r - g) / del;
      }
      h *= 60.0 / 360.0;
      if (h < 0) {
        h += 1;
      }
      return [h, s, max];
    };

    Color.prototype.hsv_to_rgb = function(h, s, v) {
      var f, i, m, n;
      h *= 6;
      i = Math.floor(h);
      f = h - i;
      if (!(i & 1)) {
        f = 1 - f;
      }
      m = Math.round(255 * v * (1 - s));
      n = Math.round(255 * v * (1 - s * f));
      v = Math.round(255 * v);
      switch (i) {
        case 1:
          return [n, v, m];
        case 2:
          return [m, v, n];
        case 3:
          return [m, n, v];
        case 4:
          return [n, m, v];
        case 5:
          return [v, m, n];
        default:
          return [v, n, m];
      }
    };

    Color.prototype._ts = function(v) {
      var r;
      r = v.toString(16);
      if (r.length === 1) {
        r = "0" + r;
      }
      return r;
    };

    return Color;

  })();

  window.Color = Color;

}).call(this);
